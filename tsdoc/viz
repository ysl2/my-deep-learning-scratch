Help on module tsensor.viz in tsensor:

NAME
    tsensor.viz - MIT License

DESCRIPTION
    Copyright (c) 2020 Terence Parr
    
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:
    
    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.
    
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.

CLASSES
    builtins.object
        PyVizView
    graphviz.files.Source(graphviz.files.File)
        QuietGraphvizWrapper
    
    class PyVizView(builtins.object)
     |  PyVizView(statement, fontname, fontsize, dimfontname, dimfontsize, matrixcolor, vectorcolor, char_sep_scale, dpi)
     |  
     |  An object that collects relevant information about viewing Python code
     |  with visual annotations.
     |  
     |  Methods defined here:
     |  
     |  __init__(self, statement, fontname, fontsize, dimfontname, dimfontsize, matrixcolor, vectorcolor, char_sep_scale, dpi)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  boxsize(self, v)
     |      How wide and tall should we draw the box representing a vector or matrix.
     |  
     |  draw(self, ax, sub)
     |  
     |  draw_matrix(self, ax, sub)
     |  
     |  draw_vector(self, ax, sub)
     |  
     |  matrix_size(self, sh)
     |      How wide and tall should we draw the box representing a matrix.
     |  
     |  savefig(self, filename)
     |      Save viz in format according to file extension.
     |  
     |  set_locations(self, maxh)
     |      This function finishes setting up necessary parameters about text
     |      and graphics locations for the plot. We don't know how to set these
     |      values until we know what the max height of the drawing will be. We don't know
     |      what that height is until after we've parsed and so on, which requires that
     |      we collect and store information in this view object before computing maxh.
     |      That is why this is a separate function not part of the constructor.
     |  
     |  show(self)
     |      Display an SVG in a notebook or pop up a window if not in notebook
     |  
     |  svg(self)
     |      Render as svg and return svg text. Save file and store name in field svgfilename.
     |  
     |  vector_size(self, sh)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  nabbrev(n) -> str
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class QuietGraphvizWrapper(graphviz.files.Source)
     |  QuietGraphvizWrapper(dotsrc)
     |  
     |  Verbatim DOT source code string to be rendered by Graphviz.
     |  
     |  Args:
     |      source: The verbatim DOT source code string.
     |      filename: Filename for saving the source (defaults to ``'Source.gv'``).
     |      directory: (Sub)directory for source saving and rendering.
     |      format: Rendering output format (``'pdf'``, ``'png'``, ...).
     |      engine: Layout command used (``'dot'``, ``'neato'``, ...).
     |      encoding: Encoding for saving the source.
     |  
     |  Note:
     |      All parameters except ``source`` are optional. All of them can be changed
     |      under their corresponding attribute name after instance creation.
     |  
     |  Method resolution order:
     |      QuietGraphvizWrapper
     |      graphviz.files.Source
     |      graphviz.files.File
     |      graphviz.files.Base
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, dotsrc)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  savefig(self, filename)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from graphviz.files.Source:
     |  
     |  from_file(filename, directory=None, format=None, engine=None, encoding='utf-8') from builtins.type
     |      Return an instance with the source string read from the given file.
     |      
     |      Args:
     |          filename: Filename for loading/saving the source.
     |          directory: (Sub)directory for source loading/saving and rendering.
     |          format: Rendering output format (``'pdf'``, ``'png'``, ...).
     |          engine: Layout command used (``'dot'``, ``'neato'``, ...).
     |          encoding: Encoding for loading/saving the source.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from graphviz.files.File:
     |  
     |  __str__(self)
     |      The DOT source code as string.
     |  
     |  pipe(self, format=None, renderer=None, formatter=None, quiet=False)
     |      Return the source piped through the Graphviz layout command.
     |      
     |      Args:
     |          format: The output format used for rendering (``'pdf'``, ``'png'``, etc.).
     |          renderer: The output renderer used for rendering (``'cairo'``, ``'gd'``, ...).
     |          formatter: The output formatter used for rendering (``'cairo'``, ``'gd'``, ...).
     |          quiet (bool): Suppress ``stderr`` output from the layout subprocess.
     |      
     |      Returns:
     |          Binary (encoded) stdout of the layout command.
     |      
     |      Raises:
     |          ValueError: If ``format``, ``renderer``, or ``formatter`` are not known.
     |          graphviz.RequiredArgumentError: If ``formatter`` is given but ``renderer`` is None.
     |          graphviz.ExecutableNotFound: If the Graphviz executable is not found.
     |          subprocess.CalledProcessError: If the exit status is non-zero.
     |  
     |  render(self, filename=None, directory=None, view=False, cleanup=False, format=None, renderer=None, formatter=None, quiet=False, quiet_view=False)
     |      Save the source to file and render with the Graphviz engine.
     |      
     |      Args:
     |          filename: Filename for saving the source (defaults to ``name`` + ``'.gv'``)
     |          directory: (Sub)directory for source saving and rendering.
     |          view (bool): Open the rendered result with the default application.
     |          cleanup (bool): Delete the source file after successful rendering.
     |          format: The output format used for rendering (``'pdf'``, ``'png'``, etc.).
     |          renderer: The output renderer used for rendering (``'cairo'``, ``'gd'``, ...).
     |          formatter: The output formatter used for rendering (``'cairo'``, ``'gd'``, ...).
     |          quiet (bool): Suppress ``stderr`` output from the layout subprocess.
     |          quiet_view (bool): Suppress ``stderr`` output from the viewer process
     |                             (implies ``view=True``, ineffective on Windows).
     |      
     |      Returns:
     |          The (possibly relative) path of the rendered file.
     |      
     |      Raises:
     |          ValueError: If ``format``, ``renderer``, or ``formatter`` are not known.
     |          graphviz.RequiredArgumentError: If ``formatter`` is given but ``renderer`` is None.
     |          graphviz.ExecutableNotFound: If the Graphviz executable is not found.
     |          subprocess.CalledProcessError: If the exit status is non-zero.
     |          RuntimeError: If viewer opening is requested but not supported.
     |      
     |      The layout command is started from the directory of ``filepath``, so that
     |      references to external files (e.g. ``[image=...]``) can be given as paths
     |      relative to the DOT source file.
     |  
     |  save(self, filename=None, directory=None)
     |      Save the DOT source to file. Ensure the file ends with a newline.
     |      
     |      Args:
     |          filename: Filename for saving the source (defaults to ``name`` + ``'.gv'``)
     |          directory: (Sub)directory for source saving and rendering.
     |      
     |      Returns:
     |          The (possibly relative) path of the saved source file.
     |  
     |  unflatten(self, stagger=None, fanout=False, chain=None)
     |      Return a new :class:`.Source` instance with the source piped through the Graphviz *unflatten* preprocessor.
     |      
     |      Args:
     |          stagger (int): Stagger the minimum length of leaf edges between 1 and this small integer.
     |          fanout (bool): Fanout nodes with indegree = outdegree = 1 when staggering (requires ``stagger``).
     |          chain (int): Form disconnected nodes into chains of up to this many nodes.
     |      
     |      Returns:
     |          Source: Prepocessed DOT source code (improved layout aspect ratio).
     |      
     |      Raises:
     |          graphviz.RequiredArgumentError: If ``fanout`` is given but ``stagger`` is None.
     |          graphviz.ExecutableNotFound: If the Graphviz unflatten executable is not found.
     |          subprocess.CalledProcessError: If the exit status is non-zero.
     |      
     |      See also:
     |          https://www.graphviz.org/pdf/unflatten.1.pdf
     |  
     |  view(self, filename=None, directory=None, cleanup=False, quiet=False, quiet_view=False)
     |      Save the source to file, open the rendered result in a viewer.
     |      
     |      Args:
     |          filename: Filename for saving the source (defaults to ``name`` + ``'.gv'``)
     |          directory: (Sub)directory for source saving and rendering.
     |          cleanup (bool): Delete the source file after successful rendering.
     |          quiet (bool): Suppress ``stderr`` output from the layout subprocess.
     |          quiet_view (bool): Suppress ``stderr`` output from the viewer process
     |                             (ineffective on Windows).
     |      
     |      Returns:
     |          The (possibly relative) path of the rendered file.
     |      
     |      Raises:
     |          graphviz.ExecutableNotFound: If the Graphviz executable is not found.
     |          subprocess.CalledProcessError: If the exit status is non-zero.
     |          RuntimeError: If opening the viewer is not supported.
     |      
     |      Short-cut method for calling :meth:`.render` with ``view=True``.
     |      
     |      Note:
     |          There is no option to wait for the application to close, and no way
     |          to retrieve the application's exit status.
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from graphviz.files.File:
     |  
     |  filepath
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from graphviz.files.File:
     |  
     |  directory = ''
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from graphviz.files.Base:
     |  
     |  copy(self)
     |      Return a copied instance of the object.
     |      
     |      Returns:
     |          An independent copy of the current object.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from graphviz.files.Base:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  encoding
     |      The encoding for the saved source file.
     |  
     |  engine
     |      The layout commmand used for rendering (``'dot'``, ``'neato'``, ...).
     |  
     |  format
     |      The output format used for rendering (``'pdf'``, ``'png'``, ...).

FUNCTIONS
    astviz(statement: str, frame='current') -> graphviz.files.Source
        Display the abstract syntax tree (AST) for the indicated Python code
        in statement. Evaluate that code in the context of frame. If the frame
        is not specified, the default is to execute the code within the context of
        the invoking code. Pass in frame=None to avoid evaluation and just display
        the AST.
        
        Returns a QuietGraphvizWrapper that renders as SVG in a notebook but
        you can also call `savefig()` to save the file and in a variety of formats,
        according to the file extension.
    
    astviz_dot(statement: str, frame='current') -> str
    
    pyviz(statement: str, frame=None, fontname='Consolas', fontsize=13, dimfontname='Arial', dimfontsize=9, matrixcolor='#cfe2d4', vectorcolor='#fefecd', char_sep_scale=1.8, fontcolor='#444443', underline_color='#C2C2C2', ignored_color='#B4B4B4', error_op_color='#A40227', ax=None, dpi=200, hush_errors=True) -> tsensor.viz.PyVizView
        Parse and evaluate the Python code in the statement string passed in using
        the indicated execution frame. The execution frame of the invoking function
        is used if frame is None.
        
        The visualization finds the smallest subexpressions that evaluate to
        tensors then underlies them and shows a box or rectangle representing
        the tensor dimensions. Boxes in blue (default) have two or more dimensions
        but rectangles in yellow (default) have one dimension with shape (n,).
        
        Upon tensor-related execution error, the offending self-expression is
        highlighted (by de-highlighting the other code) and the operator is shown
        using error_op_color.
        
        To adjust the size of the generated visualization to be smaller or bigger,
        decrease or increase the font size.
        
        :param statement: A string representing the line of Python code to visualize within an execution frame.
        :param frame: The execution frame in which to evaluate the statement. If None,
                      use the execution frame of the invoking function
        :param fontname: The name of the font used to display Python code
        :param fontsize: The font size used to display Python code; default is 13.
                         Also use this to increase the size of the generated figure;
                         larger font size means larger image.
        :param dimfontname:  The name of the font used to display the dimensions on the matrix and vector boxes
        :param dimfontsize: The  size of the font used to display the dimensions on the matrix and vector boxes
        :param matrixcolor:  The  color of matrix boxes
        :param vectorcolor: The color of vector boxes; only for tensors whose shape is (n,).
        :param char_sep_scale: It is notoriously difficult to discover how wide and tall
                               text is when plotted in matplotlib. In fact there's probably,
                               no hope to discover this information accurately in all cases.
                               Certainly, I gave up after spending huge effort. We have a
                               situation here where the font should be constant width, so
                               we can just use a simple scaler times the font size  to get
                               a reasonable approximation to the width and height of a
                               character box; the default of 1.8 seems to work reasonably
                               well for a wide range of fonts, but you might have to tweak it
                               when you change the font size.
        :param fontcolor:  The color of the Python code.
        :param underline_color:  The color of the lines that underscore tensor subexpressions; default is grey
        :param ignored_color: The de-highlighted color for deemphasizing code not involved in an erroneous sub expression
        :param error_op_color: The color to use for characters associated with the erroneous operator
        :param ax: If not none, this is the matplotlib drawing region in which to draw the visualization
        :param dpi: This library tries to generate SVG files, which are vector graphics not
                    2D arrays of pixels like PNG files. However, it needs to know how to
                    compute the exact figure size to remove padding around the visualization.
                    Matplotlib uses inches for its figure size and so we must convert
                    from pixels or data units to inches, which means we have to know what the
                    dots per inch, dpi, is for the image.
        :param hush_errors: Normally, error messages from true syntax errors but also
                            unhandled code caught by my parser are ignored. Turn this off
                            to see what the error messages are coming from my parser.
        :return: Returns a PyVizView holding info about the visualization; from a notebook
                 an SVG image will appear. Return none upon parsing error in statement.

FILE
    /home/yusoli/.conda/envs/d2l-zh/lib/python3.8/site-packages/tsensor/viz.py


